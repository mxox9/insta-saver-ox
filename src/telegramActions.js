const { Bot } = require("./config");
const { log } = require("./utils");

// ‚úÖ Text Message ‡§≠‡•á‡§ú‡§®‡•á ‡§µ‡§æ‡§≤‡§æ
const sendMessage = async ({ chatId, message, requestedBy, requestUrl }) => {
    try {
        await Bot.sendMessage(chatId, message, {
            parse_mode: "Markdown",
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "üî• My Boss ü•∑", url: "https://t.me/mixy_ox" },
                        { text: "üîó Source", url: requestUrl }
                    ]
                ]
            }
        });
        log(`Message sent to ${requestedBy?.userName || chatId}`);
    } catch (error) {
        log("sendMessage Failed üò¢: ", error.response?.body || error.message);
    }
};

// ‚úÖ Photo ‡§≠‡•á‡§ú‡§®‡•á ‡§µ‡§æ‡§≤‡§æ
const sendPhoto = async ({ chatId, photoUrl, caption, requestedBy, requestUrl }) => {
    try {
        await Bot.sendPhoto(chatId, photoUrl, {
            caption,
            parse_mode: "Markdown",
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "üî• My Boss ü•∑", url: "https://t.me/mixy_ox" },
                        { text: "üîó Source", url: requestUrl }
                    ]
                ]
            }
        });
        log(`Photo sent to ${requestedBy?.userName || chatId}`);
    } catch (error) {
        log("sendPhoto Failed üò¢: ", error.response?.body || error.message);
    }
};

// ‚úÖ Video ‡§≠‡•á‡§ú‡§®‡•á ‡§µ‡§æ‡§≤‡§æ
const sendVideo = async ({ chatId, videoUrl, caption, requestedBy, requestUrl }) => {
    try {
        await Bot.sendVideo(chatId, videoUrl, {
            caption,
            parse_mode: "Markdown",
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "üî• My Boss ü•∑", url: "https://t.me/mixy_ox" },
                        { text: "üîó Source", url: requestUrl }
                    ]
                ]
            }
        });
        log(`Video sent to ${requestedBy?.userName || chatId}`);
    } catch (error) {
        log("sendVideo Failed üò¢: ", error.response?.body || error.message);
    }
};

// ‚úÖ Media Group (Carousel Posts) ‡§≠‡•á‡§ú‡§®‡•á ‡§µ‡§æ‡§≤‡§æ
const sendMediaGroup = async ({ chatId, media, requestedBy, requestUrl }) => {
    try {
        // media array ‡§Æ‡•á‡§Ç captions repeat ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á ‡§µ‡§∞‡§®‡§æ error ‡§Ü ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
        if (media.length > 0) {
            media[0].caption = media[0].caption || "";
            media[0].parse_mode = "Markdown";
        }

        await Bot.sendMediaGroup(chatId, media);
        log(`MediaGroup sent to ${requestedBy?.userName || chatId}`);

        // Extra buttons ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú ‡§¶‡•á‡§Ç‡§ó‡•á
        await Bot.sendMessage(chatId, "üëá Downloaded from Source", {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "üî• My Boss ü•∑", url: "https://t.me/mixy_ox" },
                        { text: "üîó Source", url: requestUrl }
                    ]
                ]
            }
        });
    } catch (error) {
        log("sendMediaGroup Failed üò¢: ", error.response?.body || error.message);
    }
};

// ‚úÖ FIXED sendRequestedData
const sendRequestedData = async (context) => {
    const { chatId, mediaType, mediaUrl, displayUrl, caption = "" } = context;

    // ‡§Ö‡§ó‡§∞ Video ‡§π‡•à
    if (mediaType === "video") {
        return sendVideo({
            chatId,
            videoUrl: mediaUrl,
            caption,
            requestedBy: context.requestedBy,
            requestUrl: context.requestUrl
        });
    }

    // ‡§Ö‡§ó‡§∞ Photo ‡§π‡•à
    if (mediaType === "image") {
        return sendPhoto({
            chatId,
            photoUrl: displayUrl || mediaUrl,
            caption,
            requestedBy: context.requestedBy,
            requestUrl: context.requestUrl
        });
    }

    // ‡§Ö‡§ó‡§∞ Multiple Media (carousel post) ‡§π‡•à
    if (mediaType === "media_group" && context.mediaList) {
        const media = context.mediaList.map((item) => {
            if (item.mediaType === "video") {
                return { type: "video", media: item.mediaUrl, caption: caption };
            } else {
                return { type: "photo", media: item.displayUrl, caption: caption };
            }
        });
        return sendMediaGroup({
            chatId,
            media,
            requestedBy: context.requestedBy,
            requestUrl: context.requestUrl
        });
    }

    // ‚ùå fallback (‡§ï‡•Å‡§õ ‡§≠‡•Ä media ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ ‡§§‡•ã text ‡§≠‡•á‡§ú‡•á‡§ó‡§æ)
    return sendMessage({
        chatId,
        message: caption || "‚ùå ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§™‡§æ‡§Ø‡§æ‡•§",
        requestedBy: context.requestedBy,
        requestUrl: context.requestUrl
    });
};

module.exports = {
    sendMessage,
    sendPhoto,
    sendVideo,
    sendMediaGroup,
    sendRequestedData
};
